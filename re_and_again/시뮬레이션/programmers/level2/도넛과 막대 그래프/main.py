'''
1. 노드별 입출력 간선의 개수를 구하고.
2. 입력은 없는데 출력만 2개 이상인 노드를 구함. 이 노드가 새로 추가된 간선임
    (출력이 2개 이상이어야하는 이유는, 입력이 없고 출력만 있는 경우는 막대 그래프의 시작점에도 존재하며, 예시 내의 그래프의 최소 수는 2개이고 새로 추가된 노드는 모든 그래프에 대한 출력 간선을 가져야하기 때문에 추가된 노드의 입력은 0개, 출력은 2개 이상이되어야한다.)
3. 추가된 노드의 출력 개수를 통해 그래프의 총 개수를 구한다. 
4. 추가된 정점을 찾아서 이 정점으로 인해 입력 개수가 늘어난 노드들의 입력 개수를 하나씩 줄여준다.
5. 입력이 1개, 출력이 0개인 노드의 개수: 막대 모양 그래프의 개수, 입력 출력이 각각 2개씩인 노드의 개수: 8자형 그래프의 개수를 구한다.
    (이 때, 추가된 노드는 pass해야함에 유의한다.)
6. 총 개수에서 막대 모양 그래프의 개수, 8자 모양 그래프의 개수를 빼서 도넛 모양 그래프의 개수를 구한다.
7. 추가된 노드 번호, 도넛 모양 그래프의 개수, 막대 모양 그래프의 개수, 8자 모양 그래프의 개수를 순서대로 리턴한다.
'''

def solution(edges):
    
    # 노드별 입출력 간선 개수 구하기
    board = {}
    n = -1
    for a, b in edges:
        if a not in board:
            board[a] = [0, 0]
        if b not in board:
            board[b] = [0, 0]
        n = max(n, a, b)
        board[a][0] += 1
        board[b][1] += 1
    
    # 추가된 정점 찾기 (들어오는 정점은 없고, 나가는 정점이 두개 이상)
    added = 1
    for i in board:
        if board[i][0] >= 2 and board[i][1] == 0:
            added = i
            
    # 추가된 정점에서 반영된 간선 개수 지우기
    for a, b in edges:
        if a == added:
            board[b][1] -= 1
            
    # 총 그래프의 개수 찾기
    total = board[added][0]
    
    # 나가는 정점이 없는 노드 개수 구하기: 막대형 그래프의 개수
    # 두개가 들어오고 두개가 나가는 노드 개수 구하기: 8자 모양 그래프 개수
    # 총 그래프 개수 - 막대형 그래프 개수 - 8자 모양 그래프 개수: 도넛 모양 그래프 개수
    stick = 0
    eight = 0
    for i in board:
        if i == added:
            continue
        
        if board[i][0] == 0:
            stick += 1
        elif board[i][0] == 2 and board[i][1] == 2:
            eight += 1
    
    return [added, total-stick-eight, stick, eight]